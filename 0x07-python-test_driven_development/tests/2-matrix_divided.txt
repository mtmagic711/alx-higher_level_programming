=================================
How to use 2-matrix_divided.py
=================================

the function divid a given matrix by a given number.
def matrix_divided(matrix, div):
The function raises:
        TypeError: If matrix is not a list of lists of integers or floats.
        TypeError: If each row of the matrix doesn't have the same size.
        TypeError: If div is not a number (integer or float).
        ZeroDivisionError: If div is equal to 0.
+++++++++++
tests cases
+++++++++++

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

::

the div = 0 raise a ZeroDivisionError

>>> matrix_divided([], 0)
Traceback (most recent call last):
ZeroDivisionError: division by zero

::

if the div is not a number, it raises a TypeError.

>>> matrix_divided([], 'kds')
Traceback (most recent call last):
TypeError: div must be a number

::

if the div argument is not passed.

>>> matrix_divided([])
Traceback (most recent call last):
TypeError: matrix_divided() missing 1 required positional argument: 'div

::

if the argument is not a matrix.

>>> matrix_divided('dsd', 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

::

If the rows of the matrix doesn't have the same size.

>>> matrix_divided([[4, 5, 6],[3,4]], 2)
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size

::

An empty list case.

::


>>> matrix_divided([], 3)
[]

::

An empty list of lists is correct.

>>> matrix = [[]]
>>> print(matrix_divided(matrix, 3))
[[]]

::

A TypeError is raised if any elements in matrix are
neither ints nor floats.

>>> matrix_divided([[4, 'int'],[3,4]], 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
